# Import necessary libraries\n",
        "from sklearn import datasets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = datasets.load_iris()\n",
        "X = iris.data\n",
        "y = iris.target\n",
        "\n",
        "# Filter to include only 'setosa' and 'versicolor' (labels 0 and 1)\n",
        "filter_mask = (y == 0) | (y == 1)\n",
        "X_filtered = X[filter_mask]\n",
        "y_filtered = y[filter_mask]\n",
        "\n",
        "# Step 2: Find the number of cases\n",
        "num_cases = len(X_filtered)\n",
        "print(\"length of x:\",num_cases)\n",
        "# Step 3: Print the first 10 cases of X and Y\n",
        "first_10_X = X_filtered[:10]\n",
        "first_10_y = y_filtered[:10]\n",
        "print(\"first 10 values of x are \\n :\",first_10_X)\n",
        "print(\"first 10 values of y are:\",first_10_y)\n",
        "\n",
        "# Step 4: Find what attributes are there for X\n",
        "attributes = iris.feature_names\n",
        "print(\"attributes are:\",attributes)\n",
        "\n",
        "# Step 5: Find the mean and standard deviation of each attribute\n",
        "means = np.mean(X_filtered, axis=0)\n",
        "print(\"mean:\",means)\n",
        "stds = np.std(X_filtered, axis=0)\n",
        "print(\"standard_deviation are:\",stds)\n",
        "attribute_stats = pd.DataFrame({'Mean': means, 'Standard Deviation': stds}, index=attributes)\n",
        "\n",
        "# Step 6: Use SVC (kernel='linear') to train it\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_filtered, y_filtered, test_size=0.1, random_state=42)\n",
        "\n",
        "# Train the SVC with a linear kernel\n",
        "svc_linear = SVC(kernel='linear')\n",
        "svc_linear.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy_linear = svc_linear.score(X_test, y_test)\n",
        "print(\"accuracy rate of SVM with kernal linear model is :\",accuracy_linear)\n",
        "\n",
        "# Step 7: Test with a few sample data\n",
        "# Create a few sample data points\n",
        "sample_data = np.array([\n",
        "    [5.1, 3.5, 1.4, 0.2],  # setosa-like sample\n",
        "    [7.0, 3.2, 4.7, 1.4]   # versicolor-like sample\n",
        "])\n",
        "\n",
        "# Predict using the trained model\n",
        "sample_predictions = svc_linear.predict(sample_data)\n",
        "print(\"sample predications are:\",sample_predictions)\n",
        "\n",
        "# Step 8: Improve the classifier to get 95% accuracy\n",
        "# Train the SVC with an RBF kernel\n",
        "svc_rbf = SVC(kernel='rbf')\n",
        "svc_rbf.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy_rbf = svc_rbf.score(X_test, y_test)\n",
        "\n",
        "num_cases, first_10_X, first_10_y, attributes, attribute_stats, accuracy_linear, sample_predictions, accuracy_rbf\n",
        "# Train the SVC with an RBF kernel\n",
        "svc_rbf = SVC(kernel='rbf')\n",
        "svc_rbf.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy_rbf = svc_rbf.score(X_test, y_test)\n",
        "print(\"accuracy rate of SVM model using rbf model:\",accuracy_rbf)\n"
      ]
    }
  ]
}
